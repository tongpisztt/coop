package com.example.demo.controller;

import com.example.demo.entity.Student;
import com.example.demo.exception.BusinessException;
import com.example.demo.model.StudentRequest;
import com.example.demo.repository.StudentRepository;
import com.example.demo.service.StudentService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import static com.example.demo.constant.StudentConstant.*;

@RestController
@RequestMapping("students")
public class StudentController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private StudentRepository studentRepository;

    @Autowired
    private StudentService studentService;

    //http://localhost:8080/students
    @GetMapping("/all")
    public ResponseEntity<?> getAllStudents() {
        try {
            return new ResponseEntity<>(studentService.getAllStudents(), HttpStatus.OK);
        } catch (BusinessException e) {
            if (e.getCode() == 10003) {
                return new ResponseEntity<>(ERROR_NOT_FOUND_ANY_STUDENT_IN_DB, HttpStatus.BAD_REQUEST);
            } else {
                return new ResponseEntity<>("System Error", HttpStatus.INTERNAL_SERVER_ERROR);
//                return new ResponseEntity<String>("System Error", HttpStatus.BAD_GATEWAY);
            }
        }
    }

    //http://localhost:8080/students//getStudent/62002
    @GetMapping(path = "/getStudent/{stdID}")
    public ResponseEntity<?> getStudent(@PathVariable Integer stdID) {
        try {
            return new ResponseEntity<Student>(studentService.getStudent(stdID), HttpStatus.OK);
//            student = studentService.getStudent(stdID);
        } catch (BusinessException e) {
            if (e.getCode() == 10002) {
                return new ResponseEntity<String>(ERROR_NOT_FOUND_STUDENT_IN_DB, HttpStatus.BAD_REQUEST);
            } else {
                return new ResponseEntity<String>("System Error", HttpStatus.BAD_GATEWAY);
            }
        }
//        return new ResponseEntity<>(student, HttpStatus.OK);
    }

    //http://localhost:8080/addStudent
    @PostMapping("/add")
    public ResponseEntity<?> addStudent(@RequestBody StudentRequest request) {
        try {
            return new ResponseEntity<Student>(studentService.addStudent(request), HttpStatus.OK);
        } catch (BusinessException e) {
            if (e.getCode() == 10001) {
                return new ResponseEntity<String>(ERROR_EXISTING_STUDENT_IN_DB, HttpStatus.BAD_REQUEST);
            } else {
                return new ResponseEntity<String>("System Error", HttpStatus.BAD_GATEWAY);
            }
        }
    }

    //http://localhost:8080/delete/62006
    @DeleteMapping(path = "/delete/{stdID}")
    public ResponseEntity<?> deleteStudent(@PathVariable Integer stdID) {
        try {
            return new ResponseEntity<String>(studentService.deleteStudent(stdID), HttpStatus.OK);
        } catch (BusinessException e) {
            if (e.getCode() == 10002) {
                return new ResponseEntity<String>(ERROR_NOT_FOUND_STUDENT_IN_DB, HttpStatus.BAD_REQUEST);
            } else {
                return new ResponseEntity<String>("System Error", HttpStatus.BAD_GATEWAY);
            }
        }
    }

    //http://localhost:8080/update/62001/Jundara
    @PutMapping(path = "/update/{stdID}/{fName}")
    public ResponseEntity<?> updateStudentFirstName(@PathVariable Integer stdID, @PathVariable String fName) {
        try {
            return new ResponseEntity<Student>(studentService.updateStudentFirstName(stdID, fName), HttpStatus.OK);
        } catch (BusinessException e) {
            if (e.getCode() == 10002) {
                return new ResponseEntity<String>(ERROR_NOT_FOUND_STUDENT_IN_DB, HttpStatus.BAD_REQUEST);
            } else {
                return new ResponseEntity<String>("System Error", HttpStatus.BAD_GATEWAY);
            }
        }
    }
}
