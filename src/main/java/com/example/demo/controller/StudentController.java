package com.example.demo.controller;


import com.example.demo.entity.Student;
import com.example.demo.exception.BusinessException;
import com.example.demo.model.StudentRequest;
import com.example.demo.repository.StudentRepository;
import com.example.demo.service.StudentService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Collection;
import java.util.List;

@RestController
@RequestMapping("students")
public class StudentController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private StudentRepository studentRepository;

    @Autowired
    private StudentService studentService;

    public StudentController(StudentRepository studentRepository) {
        this.studentRepository = studentRepository;
    }

    //http://localhost:8080/students
    @GetMapping("/all")
    public List <Collection<Student>> getStudents() {
        return studentService.showAllStudents();
    }

    //http://localhost:8080/students//getStudent/62002
    @GetMapping(path = "/getStudent/{stdID}", produces = MediaType.APPLICATION_JSON_VALUE)
    public Student getStudent(@PathVariable Integer stdID) throws BusinessException {
        Student s = new Student();
        try {
            s = studentService.showStudent(stdID);
        }catch (BusinessException e){
            throw new BusinessException(e.getCode(), e.getMessage());
        }
        return s;
    }

    //http://localhost:8080/addStudent
    @PostMapping("/add")
    public ResponseEntity<?> addStudent(@RequestBody StudentRequest request) {
        try {
            return new ResponseEntity<Student>(studentService.saveStudent(request), HttpStatus.OK);
        } catch (BusinessException e) {
            if (e.getCode() == 10001) {
                return new ResponseEntity<String>("Student id is existing in system", HttpStatus.BAD_REQUEST);
            } else {
                return new ResponseEntity<String>("System Error", HttpStatus.BAD_GATEWAY);
            }
        }
    }

    //http://localhost:8080/delete/62006
    @DeleteMapping(path ="/delete/{stdID}")
    public String deleteStudent(@PathVariable Integer stdID) {
        return studentService.deleteStudent(stdID);
    }

    //http://localhost:8080/update/62001/Jundara
    @PutMapping(path ="/update/{stdID}/{fName}")
    public String updateStudentFirstName(@PathVariable Integer stdID,@PathVariable String fName) {
        return studentService.updateStudentFirstName(stdID, fName);
    }
}
